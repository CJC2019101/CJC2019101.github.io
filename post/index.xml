<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 阿飞</title>
    <link>https://CJC2019101.github.io/post/</link>
    <description>Recent content in Posts on 阿飞</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 29 Jul 2020 16:24:43 +0800</lastBuildDate>
    
	<atom:link href="https://CJC2019101.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>学会搜索解决问题</title>
      <link>https://CJC2019101.github.io/post/%E5%AD%A6%E4%BC%9A%E6%90%9C%E7%B4%A2%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 29 Jul 2020 16:24:43 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/%E5%AD%A6%E4%BC%9A%E6%90%9C%E7%B4%A2%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</guid>
      <description>一、使用搜索解决90%的问题 问题描述要准确（可以包含程序运行环境等等），使得查询结果尽可能的有交集。 找准关键词，可以进行人肉分词。 会Elasticsearch的人都应该知道搜索引擎会根据字典里面的关键词进行拆分、查询关键字或语义相同的关键字匹配文档，并进行相关度排序。所以浓缩关键</description>
    </item>
    
    <item>
      <title>StreamTokenizer与BufferedReader的使用</title>
      <link>https://CJC2019101.github.io/post/StreamTokenizer%E4%B8%8EBufferedReader%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 25 Jul 2020 15:09:06 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/StreamTokenizer%E4%B8%8EBufferedReader%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>今天在刷PAT1032题的时候抱着学习的心态去百度了一下别人的代码和自己的代码比较去其糟糠，取其精华。还真发现了一些东西，思路都是一样的所以我能保证自己的答案肯定也是可以AC的，但是第四个测试用例一直都是超时，对于使用Java答题的我早已习惯Time Out了，但是别人的没有Tim</description>
    </item>
    
    <item>
      <title>Spring的IOC与AOP</title>
      <link>https://CJC2019101.github.io/post/Spring%E7%9A%84IOC%E4%B8%8EAOP/</link>
      <pubDate>Wed, 08 Jul 2020 21:42:38 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/Spring%E7%9A%84IOC%E4%B8%8EAOP/</guid>
      <description>一、Spring IOC IOC（控制反转）将创建对象的权利交由Spring创建，是一种降低程序之间耦合度的有效方案。 解耦体现：如果指定对象的jar包没有导入，项目编译即报错可能所有涉及相关jar包的都会有红色波浪线的出现，而使用Spring IOC获取对象项目运行时报错。要知道系统编译通</description>
    </item>
    
    <item>
      <title>CPU：这个世界慢死了观后感与总结</title>
      <link>https://CJC2019101.github.io/post/CPU%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E6%85%A2%E6%AD%BB%E4%BA%86%E8%A7%82%E5%90%8E%E6%84%9F%E4%B8%8E%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 29 Apr 2020 16:38:36 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/CPU%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E6%85%A2%E6%AD%BB%E4%BA%86%E8%A7%82%E5%90%8E%E6%84%9F%E4%B8%8E%E6%80%BB%E7%BB%93/</guid>
      <description>前记 昨天的游戏脚本项目因为没注意IO流的读取操作（仅仅只是Dbug（）打印了两句话）导致运行卡顿，才引发了这篇博客的编写。体会“性能优化”的重要性。 CPU：这个世界慢死了 问题 一、为什么CPU需要多级缓存 CPU缓存分类： 1级缓存，2级缓存，3级缓存。数字越小读取速度越快而且每个等级</description>
    </item>
    
    <item>
      <title>BigInterger和BigDecimal</title>
      <link>https://CJC2019101.github.io/post/BigInterger%E5%92%8CBigDecimal/</link>
      <pubDate>Sun, 12 Apr 2020 22:23:43 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/BigInterger%E5%92%8CBigDecimal/</guid>
      <description>BigInterger 一、简介： BigInteger，大整型数。按字面意思理解就好这是一个超大的整数。 这是Java提供的用于存放超过“long”型的整数。 使用场景：当我们需要记录一个2000位的整数计算时咋办？使用字符串获取2000位的整数，再分割成Integer、Long大小范围内能接受的若干个小</description>
    </item>
    
    <item>
      <title>Java异常</title>
      <link>https://CJC2019101.github.io/post/Java%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Tue, 17 Mar 2020 21:03:31 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/Java%E5%BC%82%E5%B8%B8/</guid>
      <description>Java的异常体系 Throwable是所有Java异常的父类，只能 throw、throws Throwable的子类，及其自己。 分类： 1. “checkedException”异常： 受检异常，要么在“方法签名上”抛出异常，要么在方法内部“捕获-处理”异常。 可预料异常，知道可能要发生。。</description>
    </item>
    
    <item>
      <title>Java的IO</title>
      <link>https://CJC2019101.github.io/post/Java%E7%9A%84IO/</link>
      <pubDate>Mon, 09 Mar 2020 07:53:39 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/Java%E7%9A%84IO/</guid>
      <description>一、计算机组成原理常识： 推荐文章《CPU：这个世界慢！死！了！》，观后感编写代码要尽量减少程序的IO操作。 CPU： 计算机进行运算的地方，也可以说电脑执行指令的地方。 运算速度是最快的，快到什么程度你看了《CPU：这个世界慢死了！》就知道快的是多夸张了。 当然价格也是最贵的这也是电脑为</description>
    </item>
    
    <item>
      <title>Web小知识</title>
      <link>https://CJC2019101.github.io/post/web%E5%B0%8F%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 08 Mar 2020 20:41:25 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/web%E5%B0%8F%E7%9F%A5%E8%AF%86/</guid>
      <description>Http Erro Code分类 2XX：表示状态成功。 4XX：客户端错误。 5XX：服务器端错误。 简单的识别爬虫 User-Agent：用户代理，其实我们的浏览器就是一个用户代理，当我使用浏览器发送请求时，我们的请求头里都会有 User-Agent （用户代理）这个提示信息。我们可以通过这个可以简单的识别&amp;quot;Ht</description>
    </item>
    
    <item>
      <title>Cmder的安装与配置</title>
      <link>https://CJC2019101.github.io/post/Cmder%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 01 Mar 2020 21:35:56 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/Cmder%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
      <description>一、Cmder简介 1. Cmder简单来说就是一个比Windows 命令行（cmd.exe）更方便有效的命令行工具。 2. 与cmd相比的优势： i. 支持很多的快捷键，可以一键打开命令行。 ii. 支持分屏操作，就是一个屏幕被多个Cmder命令行界面划分。 iii. 自带git功能，也就是说安卓Cmder之后就不</description>
    </item>
    
    <item>
      <title>Collection体系的使用</title>
      <link>https://CJC2019101.github.io/post/Collection%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Sun, 16 Feb 2020 10:41:39 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/Collection%E4%BD%93%E7%B3%BB/</guid>
      <description>Collection Collection是Java所有集合类的父类。 常见的有：List、Set、Map、Tree。 常用方法： retailAll(Collectiont); 取两个集合的交集。 contains(T t); 是否包含某个值。 对应的工具类：Collections 常用方法： 1. csort(Collectiont); 对实现了Comparable接口的集合元素排序，默认是升序。 2. reverse(Collectiont); 对集合逆序排列。如：</description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://CJC2019101.github.io/post/Maven/</link>
      <pubDate>Wed, 05 Feb 2020 22:01:56 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/Maven/</guid>
      <description>Maven存在的原因 以前编写项目需要导入其他人编写的jar包时都是自己手动一个一个的拖到一个文件夹下。而Maven的pom.xml文件就很好的解决了这个问题。 jar包实质就是一个“.zip”类型的压缩文件，我们可以将其修改为.zip文件解压。打开解压后的文件夹我们可以发现jar文</description>
    </item>
    
    <item>
      <title>使用postman进行登录测试</title>
      <link>https://CJC2019101.github.io/post/%E4%BD%BF%E7%94%A8postman%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 03 Feb 2020 09:31:26 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/%E4%BD%BF%E7%94%A8postman%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E6%B5%8B%E8%AF%95/</guid>
      <description>访问登录URL获取jwt 1、 添加环境变量jwt，为了可以访问需要登录的URL我们需要在请求头中存放有效的jwt。 2、 添加如下代码 ：如果成功获取jwt会在控制台打印 “Your test name” pm.test(&amp;quot;Your test name&amp;quot;, function(){ var jsonData = pm.response.json(); console.log(jsonData.jwt) pm.environment.set(&amp;quot;jwt&amp;quot;,jsonData.jwt); }); 3、 获取登录URL，访问登录成功获取jwt。 4、 获取需要登陆才能访问的UR</description>
    </item>
    
    <item>
      <title>Github常用命令</title>
      <link>https://CJC2019101.github.io/post/github%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 20 Jan 2020 17:27:26 +0800</pubDate>
      
      <guid>https://CJC2019101.github.io/post/github%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>使用github的好处 提高工作效率，github作为一个远程版本控制仓库可以简化工作。 如：领导意见不统一，有时程序员需要做两个功能不同的程序出来。通常情况下我只能复制两个文件分开开发，如果每个程序的功能过多很容易出错。而我们使用github 的“git branch name” 可以非常简便的解决</description>
    </item>
    
    <item>
      <title></title>
      <link>https://CJC2019101.github.io/post/Lucene%E7%AE%80%E4%BB%8B%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CJC2019101.github.io/post/Lucene%E7%AE%80%E4%BB%8B%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</guid>
      <description>Lucence   每个技术都会有他存在的原因：解决实际生活中的问题和需求。个人认为Lucene（全文检索引擎工具包）就是迎合了互联网的发展解决在大量数据中准确的查询问题，关键词的划分、关键词出现的次数、包含关键词的目标文档排序等等。
 一、简介  Lucene是全文检索引擎工具包，他是slor、ElasticSearch的底层，他们各有各的优点但是因为分布式的原因ElasticSearch是明显比slor更深程序员的喜爱，万维网、github、StackOverflow都是使用的ElasticSearch做的分布式全文检索。
参考链接：
1. 什么是Lucene和Solr和Elasticsearch，它们的区别是什么？
二、Lucene底层  1.正排索引
文档ID 对应 关键词位置、出现次数。
2.倒排索引
关键词位置、出现次数 对应 文档ID。
Lucene底层使用的倒排索引，从上面的名词解释不难看出Lucene为什么使用倒排索引？各位可以想想我们在实际场景中使用浏览器搜索肯定是根据“关键词”去搜索出相关文档的，这刚好对应“倒排索引”根据关键词位置、出现次数 对应 文档ID。
参考链接：什么是倒排索引，
数据库索引   因个人能力有限以下内容全是自己参考别人的博客拿自己的语言写出来了，其中还是有很多内容是雷同的。博客内容正确性对待确认，本篇作者也还没有实际操作正是因为没有用过数据库索引优化SQL查询所以才有的此篇博客，后续我会上机操作确认其中索引的使用再做修改。此篇博客仅仅是针对自己受益较深、基础理论的介绍如果想深入了解的请查看下面的连接。
 一、简介  数据库索引是对于数据库表中的某一列或多列数据而言的,优化了数据库的查询。如果数据库数据量较少不推荐使用索引，因为创建索引也会有一定的开销。
1. 分类
 非聚合索引：以数据库表非主键key列作为的索引，则B+树节点存储索引列对应行的主键key。 聚合索引：以数据库表主键key列作为的索引，B+树叶子节点存储索引列对应行的所有数据。 联合索引：以数据库表多列作为的索引。   2. 数据库索引：索引列中每一行就是一个索引值，而数据库索引就是指向 “索引列” 中每行索引值的指针，因此B+树中节点所有值都是通过I/O操作读取的数据。
二、数据库索引结构：B+树  数据库索引数据存储在计算机硬盘的索引文件中，当我们进行“索引查询时”会进行I/O操作读取索引文件数据“生成B+树结构”加载到内存，如果索引数量多引发的I/O操作量也是巨大的。创建索引需要额外开销、索引查询I/O操作并没有减少多少、同一个表创建过多索引，各个索引间的耦合度太高反而得不偿失, 因此数据量少的数据库不推荐使用索引查询。
 特性
（1） 根节点和中间节点只存放索引值：
节省了节点存储空间(不使用数据库索引查询为一行一行的I/O读取表数据，而索引只是一行中的一列或几列数据。)存储更多索引键降低B+树高度、减少I/O操作（数据库表中数据存储在计算机硬盘中）、根据索引查询从根节点开始判断比较一直查到叶子节点时减少了表和表之间数据量的参与，即笛卡尔集的大小。
（2） 叶子节点存放数据库表中数据：
不同类别的索引叶子节点存储数据的方式不同。非聚合索引叶子节点存索引列对应表各行的主键key值，聚合索引叶子节点存索引列对应表各行的所有数据。 （3） 叶子节点之间为有序链表结构：
当索引查询遍历到叶子节点没有查询到指定数据时不返回根节点重新遍历查询，而是依靠叶子节点之间是有序链表直接往下一个叶子节点去比较，如图2-1B+树所示。   图2-1B+树结构 图2-2百度百科B+树结构 参考链接： B+数图文详解
2. 数据库索引的优化
创建索引的本质就是创建额外的文件存储索引数据，查询的时候先去额外索引的文件查找定位数据位置再去原始表中直接查询，无形之中就增加IO次数。 | 动作描述 | 聚集索引 | 非聚集索引|
| :&amp;mdash;&amp;mdash;&amp;ndash;: | :&amp;mdash;&amp;ndash;: | :&amp;mdash;-: |
| 列经常被分组排序 | 使用 | 使用 |
| 返回某范围内的数据 | 使用 | 不使用 |
| 一个或极少不同的值 | 不使用 | 不使用 |
| 小数目的不同值 | 使用 | 不使用 |
| 频繁更新的列 | 不使用 | 使用 |
| 外键列 | 使用 | 使用 |
| 主键列 | 使用 | 使用 |
参考链接：mysql索引总结&amp;mdash;-mysql 索引类型以及创建
三、SQL查询优化器  数据库的查询过程
SQL语言是一种编译语言需要经过编译器后才能执行，但是与C、C++不同的是SQL语言是非过程化语言，即操作用户只需要指定查询条件而不用关心查询过程，SQL查询优化器会根据“查询优化策略”创建多条执行方案并选择其中的最优方案编译执行（非过程化语言的体现）。
详情的查询优化策略实现请查看此链接：查询优化器（一）、查询优化器（二）
参考链接：浅谈数据库查询过程  二、数据库索引的使用  索引的创建与删除   创建索引：  1  create index userIndex on &amp;#34;user(idcard,name,age)&amp;#34;;    删除索引：  1  alter table &amp;#34;表名&amp;#34; drop index &amp;#34;索引名&amp;#34;;   使用条件与规则   最左匹配原则：使用联合索引查询条件必须包含在创建索引时数据库表列中的第一个，即必须包含“idcard”列否则SQL系统将不会使用索引查询，与联合索引列顺序无关SQL系统会自动的将顺序排成：“idcard”、“idcard，name”、“idcard，name，age”。 !</description>
    </item>
    
  </channel>
</rss>